PJ.EnumConstantNotPresentException=function(message){PJ.Exception.call(this,"EnumConstantNotPresentException",message)};PJ.EnumConstantNotPresentException.prototype=Object.create(PJ.Exception.prototype);PJ.EnumConstantNotPresentException.prototype.constructor=PJ.EnumConstantNotPresentException;PJ.Enum=function(_args){var _values=[];var _size=0;var re_varName=/^[a-zA-Z_][a-zA-Z0-9_]*$/i;for(var i=0;i<arguments.length;i++){var key=arguments[i];if(PJ.isString(key)){if(!re_varName.test(key)){throw new PJ.IllegalArgumentException("Invalid identifier: "+key)}else{if(typeof this[key]==="undefined"){throw new PJ.IllegalArgumentException("Duplicate Enumeration Constant"+key)}else{this[key]=_size++;_values.push(key)}}}}this.values=function(){return _values.slice()};this.size=function(){return _size};PJ.Enum.prototype.valueOf=function(name){if(!PJ.isSet(name)){throw new PJ.IllegalArgumentException("name is required")}else{if(!PJ.isString(name)){throw new PJ.IllegalArgumentException("name must be a string")}else{if(new RegExp("/^[a-zA-Z_][a-zA-Z0-9_]*$/i").test(name)){throw new PJ.IllegalArgumentException("name is not a valid identifier")}else{for(var ec in this){if(this.hasOwnProperty(ec)){if(ec===name){return this[ec]}}}throw new PJ.EnumConstantNotPresentException("'"+name+"' does not exist in this enumeration.")}}}};PJ.Enum.prototype.toString=function(){return"Enumeration"}};